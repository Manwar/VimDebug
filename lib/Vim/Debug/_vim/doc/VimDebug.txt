*VimDebug.txt*      Vim debugger integration


            VIM REFERENCE MANUAL    by Eric Johnson

*VimDebug* *VimDebug.vim*

1. VimDebug Intro                   |VimDebug-intro|
2. Requirements                     |VimDebug-req|
3. Installation                     |VimDebug-install|
4. Usage                            |VimDebug-usage|
5. Keybindings                      |VimDebug-keys|

==============================================================================
1. VimDebug Intro                   *VimDebug-intro*

VimDebug integrates the Perl debugger with Vim.

To manage saving and restoring key bindings used when running
VimDebug, we use 'savemap', vimscript code written by tyru,
<tyru.exe@gmail.com>, whom we thank! We used files from this commit:
    
https://github.com/tyru/savemap.vim/commit/61c2afcb6e16c01b82950565093cc8b532ea57f6

==============================================================================
2. Requirements                     *VimDebug-req*

VimDebug requires the following to function:

- *nix/Ubuntu/OSX
- Vim with +signs, and +perl compiled in
- Perl 5.FIXME
- The Vim::Debug Perl module

VimDebug is a Vim plugin, see |add-plugin|.  This plugin is only available if
'compatible' is not set and vim has been compiled with '+signs' and '+perl'.

==============================================================================
3. Installation                     *VimDebug-install*

Use Perl's package manager, cpanm, to install the Vim::Debug Perl module.

  curl -L http://cpanmin.us | perl - --sudo App::cpanminus # install cpanm
  sudo cpanm Vim::Debug                                    # install Vim::Debug

For more help with installing Perl modules, see the cpanm documentation on
cpan.

==============================================================================
4. Usage                            *VimDebug-usage*

As you launch Vim, loading VimDebug.vim will check to see if it has unique
nmap access to its start key, by default <F12>. If it doesn't, it will let you
know that you can't use VimDebug. If it does, pressing it will attempt to
launch the debugger on whatever file is loaded in the current window,
prompting you for arguments.

Another way to launch the debugger is to call its start function:

    :call VDstart()

You can pass a string argument that holds arguments that will be passed to the
debugger invocation. For example:

    :call VDstart("foo 42")

If you pass a single argument that is an empty string. VimDebug will prompt
you for arguments.

If VimDebug successfully launches the debugger, it will install its own key
bindings for navigating it, and this may disrupt some of the current bindings.
But VimDebug will have saved those previous bindings, and while the debugger
is running, pressing the start key will toggle the bindings between the user's
saved key bindings and VimDebug's own.
    
The key bindings are also restored upon exit from the debugger.

If you don't like the default start key or other key bindings, you can always
change them by editing VimDebug.vim.

==============================================================================
5. Key bindings                     *VimDebug-keys*

These are the default key bindings. To change them edit VimDebug.vim.

<F12>         Start the debugger, or toggle the key bindings.
<F11>         Exit the debugger.
<F10>         Restart the debugger. Breakpoints are saved.

<F9>          Continue.
<F8>          Next.
<F7>          Step in.
<F6>          Step out.

<Leader>b     Set breakpoint on the current line.
<Leader>c     Clear breakpoint on the current line.
<Leader>ca    Clear all breakpoints.

<Leader>x     Print the value of the variable under the cursor
<Leader>x/    Print the value of an expression thats entered.
<Leader>/     Type a command for the debugger to execute and echo the result.


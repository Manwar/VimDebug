You can obtain VimDebug's development code from its git repository:

    https://github.com/kablamo/VimDebug.git

Please read the ./lib/Vim/Debug/Manual.pm file. It explains what
VimDebug needs so it can run and how regular users will install it.

At runtime, the +perl Vim extension must be able to find the proper
Vim::Debug Perl module files and the proper VimDebug plugin files.

# --------------------------------------------------------------------
Trying out the git repo VimDebug code.

During development, it is practical to be able to try out on a live
Vim instance the VimDebug code as it stands in the working directory,
with as little interference as possible from other Vim code or
settings.

For this, there is the ./script/vdvim program: it launches a very
plain Vim instance with PERL5LIB pointing to the repo's ./lib and with
a runtimepath having ./lib/Vim/Debug/_vim; it also rebuilds VimDebug's
help tags file.

There is also the ./t/sample.pl file that you can play on with
VimDebug.

FIXME-rephrase If you change any relevant files, for those code
changes to apply you'd better relaunch any Vim instance that uses
them.

# --------------------------------------------------------------------
Running the git repo VimDebug from outside the git working directory

You may want to try out the code that is currently checked out in the
git repo with your regular Vim setup.

One way to do this is to make sure you launch your Vim instance with
PERL5LIB pointing to the repo's ./lib, for example:

    export PERL5LIB=.../lib

and an appropriate Vim runtimepath, for example by having in your
.vimrc something like:

    let &runtimepath .= ',.../lib/Vim/Debug/_vim

You may need to manually rebuild the help tags file, with ':helptags
.../_vim/doc'.

# --------------------------------------------------------------------
Making a snapshot of the code ready for distribution

When you find that the code in development is suitable for release,
you can test it and build a distribution package for it with
Dist::Zilla:

    dzil test
    dzil build

That will update or create a VimDebug-x.xxx/ distribution directory,
and its corresponding tar/gzip archive. The directory can be moved
around and/or pointed to by the PERL5LIB that want it. The Vim add-on
files are in the ./lib/Vim/Debug/_vim subdirectory, that can be added
to Vim's runtimepath and/or be installed with 'vimdebug-install'. Note
that this will not necessarily override an already runtimepath'ed
VimDebug version.

These files get rebuilt by 'dzil build':

    ./META.json
    ./README.pod

They only need to be updated in the github repo when a CPAN
distribution is made available, so during development you can ignore
them. To get rid of perhaps annoying "modified" 'git status' messages,
you can checkout the unmodified version, with 'git checkout META.json
README.pod'.

To permanently incoporate the distribution to your version of perl or
another, you could run from the distribution directory or from its
expanded archive:

    perl Makefile.PL
    make
    make test
    make install

# --------------------------------------------------------------------
Releasing to CPAN

Currently, only Eric (kablamo) does this.

# --------------------------------------------------------------------
Custom debugger support

To add support for a debugger for language Foo let's say, one would
need to build ./lib/Vim/Debug/Foo.pm, copying and adapting from
.../Perl.pm for inspiration. Not sure what else is needed...

Then VimDebug.vim would need to be tweaked to decide which debugger to
use -- currently s:LaunchDebugger() only invokes Perl's.


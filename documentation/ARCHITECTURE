# Some notes on the VimDebug architecture

This is how the streams are set up, and how commands are passed from
Vim to the VimDebug daemon to the debugger and vice versa:

     +--------------------------------+
     |      Running Vim instance      |
     |  (./vim/plugin/VimDebug.vim)   |
     +--------------------------------+
          |           |           |
          ^           v           ^
          |           |           |             Fifos for communicating
   .ctl_vddFIFOvim    |    .dbg_vddFIFOvim      between the running Vim
          |           |           |             instance and our VimDebug
          |    .ctl_vimFIFOvdd    |             daemon.
          |           |           |
          ^           v           ^
          |           |           |
        +---------------------------+
        |      VimDebug daemon      |
        |      (./bin/vdd.pl)       |
        +---------------------------+
           |                     |
           ^                     v
           |                     |
                 $VimDebug::
             DebuggerInterface::          The VimDebug daemon gains access
                    Base::                to the debugger via the
          READ                 WRITE      VimDebug::DebuggerInterface API.
           |                     |
           ^                     v
           |                     |
         STDOUT                STDIN
        +---------------------------+
        |  Forked debugger process. |
        |  One of:                  |
        |      perl -d              |
        |      python -d            |
        |      ruby -rdebug         |
        |      gdb                  |
        |      jdb                  |
        |      ...                  |
        +---------------------------+

All debugger interfaces should inherit from:

   VimDebug::DebuggerInterface

So we have for example:

   VimDebug::DebuggerInterface::Perl
   VimDebug::DebuggerInterface::Ruby
   ...

These override callback functions like step(), _next(), etc., from
VimDebug::DebuggerInterface.

The VimDebug daemon (vdd) calls these functions at the right time.
For example, when Vim issues a step command to vdd, vdd will call
$debugger->step(), where $debugger is for example an instance of
VimDebug::DebuggerInterface::Perl.

## Some notes on the fifos

.ctl_vddFIFOvim
.dbg_vddFIFOvim
.ctl_vimFIFOvdd

